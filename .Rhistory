library(ggplot2)    # plotting
setwd("C:\\Users\\Lorenz\\OneDrive\\Documents\\Universität\\Projekte\\Predicting Student Dropout\\Implementation\\working version")
### FUNCTIONS ######################################################################################
# removes id as predictor and formats categorial variables
preparation <- function(dataset = dataset){
dataset <- dataset[2:ncol(dataset)]
dataset <- dataset %>%
mutate(
success = as.factor(success),
staat_d = as.factor(staat_d),
sex_m = as.factor(sex_m)
)
return(dataset)
}
run_model <- function(dataset){
sem_indices <- c(2,4,6,7,9,11)
flag <- TRUE
for (i in sem_indices){
train <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train <- preparation(train)
test <- preparation(test)
# BUILD MODEL
fit <- rpart(
f = success ~ .,
data = train
)
# PREDICT
pred <- data.frame(
"pred" = predict(
fit,
test,
type = "class" # options:
)
)
# RESULTS
cm <- confusionMatrix(data = pred$pred, test$success)
print(cm$overall["Accuracy"])
current <-  filter(dataset, sem_index == i)
prop <-  prop.table(table(current$success))
row <-  data.frame(
"sem_index" = i,
"n_test" = nrow(current),
"0_frac" = prop[1],
"1_frac" = prop[2],
"ACC" = cm$overall["Accuracy"],
"FAL" = cm$table[1,2] / (cm$table[1,2] + cm$table[2,2]),
"SEN" = cm$byClass["Sensitivity"],
#"SPE" = cm$byClass["Specificity"],
"PRE" = cm$byClass["Pos Pred Value"],
"KAP" = cm$overall["Kappa"],
"TP" = cm$table[1,1],
"TN" = cm$table[2,2],
"FP" = cm$table[1,2],
"FN" = cm$table[2,1]
)
# BUILD RESULTS TABLE
if(flag){
table <- row
} else {
table <- bind_rows(table, row[1,])
}
flag <- FALSE
}
return(table)
}
### READ DATA ######################################################################################
# Training data: semester 1, mean data
dataset <- read.csv(
file = "03_linearization/02_output/dataset_lin_1_dt.csv",
sep = ";"
)
# Anfdat data:
anfdata <- read.csv(
file = "01_database preparation/02_output/dataset.csv",
sep = ";"
)[1:2] %>%
group_by(id, anfdat) %>%
summarise(count = n()) %>%
select(-count)
### BUILD DATASET ##################################################################################
# Semester index dataset
start_sem <- anfdata %>%
group_by(anfdat) %>%
summarise(count = n()) %>%
mutate(sem_index = 1:nrow(.)) %>%
select(-count)
# add semester data to dataset
anfdata <- inner_join(start_sem, anfdata, by = "anfdat")
dataset <- inner_join(anfdata, dataset, by = "id") %>%
select(-anfdat)
rm(anfdata)
### SCRIPT #########################################################################################
table <- run_model(dataset)
table <- left_join(table, start_sem, by = "sem_index")
### EXPORT #########################################################################################
path <- "50_extra/QPL_analysis/"
write.table(
table,
file = paste(path, "dt_models_per_semester.csv", sep = ""),
sep = ";",
dec = ",",
row.names = FALSE
)
fit <- train(
f = success ~ .,
data = train_set,
method = "J48"
)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test <- preparation(test_set)
train <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test <- preparation(test_set)
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test <- preparation(test_set)
test_set <- preparation(test_set)
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test_set <- preparation(test_set)
fit <- train(
f = success ~ .,
data = train_set,
method = "J48"
)
rm(fit)
fit <- train(
f = success ~ .,
data = train_set,
method = "J48"
)
fit <- train(
f = success ~ .,
data = train_set,
method = "J48",
na.action=NULL
)
fit <- train(
f = success ~ .,
data = train_set,
method = "J48",
na.action=NULL
)
pred <- data.frame(
"pred" = predict(
fit,
test_set,
type = "class" # options:
)
)
pred <- data.frame(
"pred" = predict(
fit,
test_set,
type = "raw" # options:
)
)
predict(
fit,
test_set,
type = "raw" # options:
)
fit <- train(
f = success ~ .,
data = train_set,
method = "rpart",
na.action=NULL
)
pred <- data.frame(
"pred" = predict(
fit,
test_set,
type = "class" # options:
)
)
pred <- data.frame(
"pred" = predict(
fit,
test_set,
type = "raw" # options:
)
)
View(pred)
predict(
fit,
test_set,
type = "raw" # options:
)
predict(
fit,
new_data = test_set,
type = "raw" # options:
)
View(train_set)
setwd("C:\\Users\\Lorenz\\OneDrive\\Documents\\Universität\\Projekte\\Predicting Student Dropout\\Implementation\\working version")
preparation <- function(dataset = dataset){
dataset <- dataset[2:ncol(dataset)]
dataset <- dataset %>%
mutate(
success = as.factor(success),
staat_d = as.factor(staat_d),
sex_m = as.factor(sex_m)
)
return(dataset)
}
### READ DATA ######################################################################################
# Training data: semester 1, mean data
dataset <- read.csv(
file = "03_linearization/02_output/dataset_lin_1_dt.csv",
sep = ";"
)
# Anfdat data:
anfdata <- read.csv(
file = "01_database preparation/02_output/dataset.csv",
sep = ";"
)[1:2] %>%
group_by(id, anfdat) %>%
summarise(count = n()) %>%
select(-count)
### BUILD DATASET ##################################################################################
# Semester index dataset
start_sem <- anfdata %>%
group_by(anfdat) %>%
summarise(count = n()) %>%
mutate(sem_index = 1:nrow(.)) %>%
select(-count)
# add semester data to dataset
anfdata <- inner_join(start_sem, anfdata, by = "anfdat")
dataset <- inner_join(anfdata, dataset, by = "id") %>%
select(-anfdat)
rm(anfdata)
sem_indices <- c(2,4,6,7,9,11)
flag <- TRUE
sem_indices=4
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
i=4
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test_set <- preparation(test_set)
fit <- train(
f = success ~ .,
data = train_set,
method = "rpart",
na.action=NULL
)
fit
predict(
fit,
new_data = test_set,
type = "raw" # options:
)
predict(
fit,
new_data = test_set
#type = "raw"
)
"pred" = predict.rpart((
fit,
new_data = test_set
#type = "raw"
)
)
predict.rpart(
fit,
new_data = test_set
#type = "raw"
)
library(rpart)
predict.rpart(
fit,
new_data = test_set
#type = "raw"
)
fit <- train(
x = train_set$success,
y = train_set[, -which(colnames(train_set) == "def")],
data = train_set,
method = "rpart",
na.action=NULL
)
train(
x = train_set$success,
y = train_set[, -which(colnames(train_set) == "def")],
data = train_set,
method = "rpart",
na.action=NULL
)
fit <- train(
x = train_set$success,
y = train_set[, -which(colnames(train_set) == "success")],
data = train_set,
method = "rpart",
na.action=NULL
)
fit$finalModel
summary(fit$finalModel)
pred <- data.frame(
"pred" = predict.rpart(
fit$finalModel,
newdata = test_set
#type = "raw"
)
)
pred <- data.frame(
"pred" = predict.rpart(
fit$finalModel,
newdata = test_set
#type = "raw"
)
)
pred <- data.frame(
"pred" = predict(
fit$finalModel,
newdata = test_set
#type = "raw"
)
)
View(test_set)
predict(
fit$finalModel,
newdata = test_set,
type = "raw"
)
predict(
fit$finalModel,
newdata = test_set,
type = "class"
)
predict(
fit,
newdata = test_set,
type = "class"
)
names(test_set)
names(train_set)
fit$finalModel
fit$finalModel$call
fit2 <- rpart(
f = success ~ .,
data = train_set,
#method = "rpart",
na.action=NULL
)
fit2 <- rpart(
f = success ~ .,
data = train_set,
#method = "rpart",
na.action=NULL
)
fit2 <- rpart(
f = success ~ .,
data = train_set,
#method = "rpart",
#na.action=NULL
)
predict(
fit2,
newdata = test_set,
type = "class"
)
predict.train(
fit2,
newdata = test_set,
type = "class"
)
predict(
fit,
newdata = test_set,
type = "class"
)
predict.train(
fit,
newdata = test_set,
type = "class"
)
predict.train(
fit$finalModel,
newdata = test_set,
type = "class"
)
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test_set <- preparation(test_set)
i=2
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
test_set <- preparation(test_set)
fit <- train(
f = success ~ .,
data = train_set,
method = "rpart",
na.action=NULL
)
pred <- data.frame(
"pred" = predict.train(
fit$finalModel,
newdata = test_set,
type = "class"
)
)
fit <- rpart(
f = success ~ .,
data = train_set
)
pred <- data.frame(
"pred" = predict(
fit,
newdata = test_set,
type = "class"
)
)
preparation <- function(dataset = dataset){
dataset <- dataset[2:ncol(dataset)]
dataset <- dataset %>%
mutate(
success = as.factor(success),
staat_d = as.factor(staat_d),
sex_m = as.factor(sex_m)
)
return(dataset)
}
run_model <- function(dataset){
sem_indices <- c(2,4,6,7,9,11)
flag <- TRUE
for (i in sem_indices){
train_set <- filter(dataset, sem_index < i) %>%
select(-sem_index)
test_set <- filter(dataset, sem_index == i) %>%
select(-sem_index)
train_set <- preparation(train_set)
test_set <- preparation(test_set)
# BUILD MODEL
fit <- rpart(
f = success ~ .,
data = train_set
)
# PREDICT
pred <- data.frame(
"pred" = predict(
fit,
newdata = test_set,
type = "class"
)
)
# RESULTS
cm <- confusionMatrix(data = pred$pred, test$success)
print(cm$overall["Accuracy"])
current <-  filter(dataset, sem_index == i)
prop <-  prop.table(table(current$success))
row <-  data.frame(
"sem_index" = i,
"n_test" = nrow(current),
"0_frac" = prop[1],
"1_frac" = prop[2],
"ACC" = cm$overall["Accuracy"],
"FAL" = cm$table[1,2] / (cm$table[1,2] + cm$table[2,2]),
"SEN" = cm$byClass["Sensitivity"],
#"SPE" = cm$byClass["Specificity"],
"PRE" = cm$byClass["Pos Pred Value"],
"KAP" = cm$overall["Kappa"],
"TP" = cm$table[1,1],
"TN" = cm$table[2,2],
"FP" = cm$table[1,2],
"FN" = cm$table[2,1]
)
# BUILD RESULTS TABLE
if(flag){
table <- row
} else {
table <- bind_rows(table, row[1,])
}
flag <- FALSE
}
return(table)
}
dataset <- read.csv(
file = "03_linearization/02_output/dataset_lin_1_dt.csv",
sep = ";"
)
anfdata <- read.csv(
file = "01_database preparation/02_output/dataset.csv",
sep = ";"
)[1:2] %>%
group_by(id, anfdat) %>%
summarise(count = n()) %>%
select(-count)
