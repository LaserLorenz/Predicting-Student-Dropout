max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) break
if(trace==T){ #print output of each iteration
prmatrix(vif_vals,collab=c('var','vif'),rowlab=rep('',nrow(vif_vals)),quote=F)
cat('\n')
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
flush.console()
}
in_dat<-in_dat[,!names(in_dat) %in% vif_vals[max_row,1]]
}
return(names(in_dat))
}
print("Read input data")
dataset <- read.csv(
file = "~/Desktop/Masterarbeit_local/05_correlation/02_output/dataset_noncor.csv",
sep = ";"
)
print("Preprocessing dataset")
expl_vars <- dataset[, c(3:ncol(dataset))]
dataset <- dataset %>%
mutate(
success = as.factor(success),
sex_m = as.factor(sex_m),
staat_d = as.factor(staat_d)
)
print("Calculate VIF and create non-multilinear dataset")
base_var <- vif_func(in_frame = expl_vars, thresh = 5, trace = T)
col_nums <- which(colnames(expl_vars) %in% base_var)
expl_vars_sub <- select(expl_vars, col_nums)
dataset_vif <- cbind(dataset[, c(1,2)], expl_vars_sub)
corr_matrix_sub <- cor(expl_vars_sub) # unnÃ¶tig
View(corr_matrix_sub)
rm(corr_matrix_sub)
model_bfs <- step(object = model_vif, direction = "backward", trace = 0)
model_ffs <- step(object = model_vif, direction = "forward", trace = 0)
model_tfs <- step(object = model_vif, direction = "both", trace = 0)
model_nul <- glm(success ~ 1,data = dataset, family = "binomial")
print("Model after VIF:")
f_vif <- as.formula(
paste(
'success ~',
paste(colnames(dataset_vif)[c(3:ncol(dataset_vif))],
collapse = '+')
)
model_vif <- glm(
f_vif,
data = dataset_vif,
family = "binomial"
)
print("Significant model after VIF:")
sel_var <- summary(model_vif)$coeff[-1,4] < 0.05
rel_var <- names(sel_var)[sel_var == TRUE]
f_new <- as.formula(paste("success ~",paste(rel_var, collapse= "+")))
model_sig <- glm(
f_new,
data = dataset,
family = "binomial"
)
model_bfs <- step(object = model_vif, direction = "backward", trace = 0)
model_bfs <- step(object = model_vif, direction = "backward", trace = 1)
model_ffs <- step(object = model_vif, direction = "forward", trace = 0)
model_tfs <- step(object = model_vif, direction = "both", trace = 0)
print("*** Stepwise Feature Selection complete ***")
model_bfs==model_vif
model_bfs$model==model_vif$model
print(1 - (model_vif$deviance / model_vif$null.deviance))
print(1 - (model_sig$deviance / model_sig$null.deviance))
print(1 - (model_nul$deviance / model_nul$null.deviance))
print(1 - (model_bfs$deviance / model_bfs$null.deviance))
print(1 - (model_ffs$deviance / model_ffs$null.deviance))
print(1 - (model_tfs$deviance / model_tfs$null.deviance))
print(1 - (model_nul$deviance / model_nul$null.deviance))
print(1 - (model_sig$deviance / model_sig$null.deviance))
print(1 - (model_vif$deviance / model_vif$null.deviance))
print(1 - (model_bfs$deviance / model_bfs$null.deviance))
print(1 - (model_ffs$deviance / model_ffs$null.deviance))
print(1 - (model_tfs$deviance / model_tfs$null.deviance))
a <- print(1 - (model_nul$deviance / model_nul$null.deviance))
b <- print(1 - (model_sig$deviance / model_sig$null.deviance))
c <- print(1 - (model_vif$deviance / model_vif$null.deviance))
d <- print(1 - (model_bfs$deviance / model_bfs$null.deviance))
e <- print(1 - (model_ffs$deviance / model_ffs$null.deviance))
f <- print(1 - (model_tfs$deviance / model_tfs$null.deviance))
model_infos <- c(a,b,c,d,e,f)
model_infos
model_infos <- rbind(a,b,c,d,e,f)
View(model_infos)
model_infos <- rbind(nul, sig, vif, bfs,ffs,tws)
nul <- print(1 - (model_nul$deviance / model_nul$null.deviance))
sig <- print(1 - (model_sig$deviance / model_sig$null.deviance))
vif <- print(1 - (model_vif$deviance / model_vif$null.deviance))
bfs <- print(1 - (model_bfs$deviance / model_bfs$null.deviance))
ffs <- print(1 - (model_ffs$deviance / model_ffs$null.deviance))
tws <- print(1 - (model_tfs$deviance / model_tfs$null.deviance))
model_infos <- rbind(nul, sig, vif, bfs,ffs,tws)
View(model_infos)
rm(nul, sig, vif, bfs,ffs,tws,a,b,c,d,e,f_new)
rm(nul, sig, vif, bfs,ffs,tws,a,b,c,d,e,f)
mcFadden <- rbind(nul, sig, vif, bfs,ffs,tws)
nul <- print(1 - (model_nul$deviance / model_nul$null.deviance))
sig <- print(1 - (model_sig$deviance / model_sig$null.deviance))
vif <- print(1 - (model_vif$deviance / model_vif$null.deviance))
bfs <- print(1 - (model_bfs$deviance / model_bfs$null.deviance))
ffs <- print(1 - (model_ffs$deviance / model_ffs$null.deviance))
tws <- print(1 - (model_tfs$deviance / model_tfs$null.deviance))
mcFadden <- rbind(nul, sig, vif, bfs,ffs,tws)
View(mcFadden)
rename(mcFadden, V1 = "McFadden")
rename(mcFadden, "V1" = "McFadden")
rename(mcFadden, V1= McFadden)
model_infos <- data.frame("McFadden" = c(nul, sig, vif, bfs, ffs, tws))
View(model_infos)
mcFadden <- c(nul, sig, vif, bfs, ffs, tws)
model_infos <- data.frame("McFadden" = mcFadden)
mcFadden <- c(nul, sig, vif, bfs, ffs, tws)
model_infos <- data.frame("McFadden" = mcFadden)
View(model_infos)
str(model_infos)
names <- c(nul, sig, vif, bfs, ffs, tws)
rm(mcFadden)
names <- c(nul, sig, vif, bfs, ffs, tws)
for(i in names){
print("1")
}
names <- c(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tws)
print(1 - ((i$deviance+length(i$coefficients)) / i$null.deviance))
names <- c(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tws)
names <- c(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
print(1 - ((i$deviance+length(i$coefficients)) / i$null.deviance))
print(i)
for(i in names){
print(i)
}
print(i$Deviance)
print(i)
print(i$`Resid. Df`)
rm(i, model_infos, nul, sig, tws, vif, names)
rm(ffs, bfs)
model_info <- function(model){
l = length(coef(model))
dev = model$deviance
aic = model$aic
mF = 1 - (model$deviance / model$null.deviance)
aMF = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance)
list <- c(l, dev, aic, mF, aMF)
return(list)
}
vif_info <- model_info(model_nul)
vif_info
model_info <- function(model){
l = length(coef(model))
dev = model$deviance
aic = model$aic
mF = 1 - (model$deviance / model$null.deviance)
aMF = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance)
list <- data.frame(
"Length" = l,
"Deviance" = dev,
"AIC" = aic,
"McFadden" = mF,
"adj McFadden" = aMF)
return(list)
}
vif_info <- model_info(model_nul)
View(vif_info)
model_info <- function(model){
l = length(coef(model))
dev = model$deviance
aic = model$aic
mF = 1 - (model$deviance / model$null.deviance)
aMF = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance)
list <- data.frame(
"Predictors" = l,
"Deviance" = dev,
"AIC" = aic,
"McFadden" = mF,
"adj McFadden" = aMF)
return(list)
}
vif_info <- model_info(model_nul)
View(vif_info)
names <- c("model_nul", "model_sig", "model_vif", "model_bfs", "model_ffs", "model_tfs")
model_infos <- for(i in names){rbind(model_info(i))}
names <- c(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
model_infos <- for(i in names){rbind(model_info(i))}
names <- data.frame(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
rm(names, i)
model_infos = rbind(model_infos, model_info(i))
model_infos <- NULL
names <- (model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
names <- c(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
model_infos <- NULL
for (i in names){
model_infos = rbind(model_infos, model_info(i))
}
names <- data.frame(model_nul, model_sig, model_vif, model_bfs, model_ffs, model_tfs)
nul_info <- model_info(model_nul)
vif_info <- model_info(model_vif)
sig_info <- model_info(model_sig)
bfs_info <- model_info(model_bfs)
ffs_info <- model_info(model_ffs)
tfs_info <- model_info(model_tfs)
model_infos <- rbind(nul_info, vif_info, sig_info, bfs_info, ffs_info, tfs_info)
View(model_infos)
summary(model_infos)
model_infos
print(model_infos)
model_info <- function(model){
list <- data.frame(
"Predictors" = length(coef(model)),
"Deviance" = model$deviance,
"AIC" = model$aic,
"McFadden" = 1 - (model$deviance / model$null.deviance),
"adj McFadden" = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance))
return(list)
}
nul_info <- model_info(model_nul)
vif_info <- model_info(model_vif)
sig_info <- model_info(model_sig)
bfs_info <- model_info(model_bfs)
ffs_info <- model_info(model_ffs)
tfs_info <- model_info(model_tfs)
model_infos <- rbind(nul_info, vif_info, sig_info, bfs_info, ffs_info, tfs_info)
print(model_infos)
vif_func <- function(in_frame,thresh=10,trace=T,...){
require(fmsb)
if(class(in_frame) != 'data.frame') in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- names(in_frame)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame, ...))))
}
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
prmatrix(vif_init,collab=c('var','vif'),rowlab=rep('',nrow(vif_init)),quote=F)
cat('\n')
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
return(var_names)
}
else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
while(vif_max >= thresh){
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat, ...))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) break
if(trace==T){ #print output of each iteration
prmatrix(vif_vals,collab=c('var','vif'),rowlab=rep('',nrow(vif_vals)),quote=F)
cat('\n')
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
flush.console()
}
in_dat<-in_dat[,!names(in_dat) %in% vif_vals[max_row,1]]
}
return(names(in_dat))
}
model_info <- function(model){
list <- data.frame(
"Predictors" = length(coef(model)),
"Deviance" = model$deviance,
"AIC" = model$aic,
"McFadden" = 1 - (model$deviance / model$null.deviance),
"adj McFadden" = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance))
return(list)
}
dataset <- read.csv(
file = "~/Desktop/Masterarbeit_local/05_correlation/02_output/dataset_noncor.csv",
sep = ";"
)
View(dataset)
expl_vars <- dataset[, c(3:ncol(dataset))]
dataset <- dataset %>%
mutate(
success = as.factor(success),
sex_m = as.factor(sex_m),
staat_d = as.factor(staat_d)
)
print("Calculate VIF and create non-multilinear dataset")
base_var <- vif_func(in_frame = expl_vars, thresh = 5, trace = T)
col_nums <- which(colnames(expl_vars) %in% base_var)
expl_vars_sub <- select(expl_vars, col_nums)
dataset_vif <- cbind(dataset[, c(1,2)], expl_vars_sub)
print("*** Variance Inflation Factor complete ***")
print("Null-Model:")
model_nul <- glm(success ~ 1,data = dataset, family = "binomial")
print("Model after VIF:")
f_vif <- as.formula(
paste(
'success ~',
paste(colnames(dataset_vif)[c(3:ncol(dataset_vif))],
collapse = '+')
)
model_vif <- glm(
f_vif,
data = dataset_vif,
family = "binomial"
)
print("Significant model after VIF:")
sel_var <- summary(model_vif)$coeff[-1,4] < 0.05
rel_var <- names(sel_var)[sel_var == TRUE]
f_new <- as.formula(paste("success ~",paste(rel_var, collapse= "+")))
model_sig <- glm(
f_new,
data = dataset,
family = "binomial"
)
print("Build models with bachward, forward and two-way selection")
model_bfs <- step(object = model_vif, direction = "backward", trace = 1)
model_ffs <- step(object = model_vif, direction = "forward", trace = 0)
model_tfs <- step(object = model_vif, direction = "both", trace = 0)
print("*** Stepwise Feature Selection complete ***")
nul_info <- model_info(model_nul)
vif_info <- model_info(model_vif)
sig_info <- model_info(model_sig)
bfs_info <- model_info(model_bfs)
ffs_info <- model_info(model_ffs)
tfs_info <- model_info(model_tfs)
model_infos <- rbind(nul_info, vif_info, sig_info, bfs_info, ffs_info, tfs_info)
print(model_infos)
summary(model_bfs)
summary(model_ffs)
summary(model_tfs)
summary(model_vif)
summary(model_sig)
summary(model_nul)
anova(model_bfs, model_sig, test ="Chisq") # interpretation?
anova(model_sig, model_bfs, test ="Chisq") # interpretation?
print(model_infos)
model_infos <- rbind(
"nul" = nul_info,
"vif" = vif_info,
"sig" = sig_info,
"bfs" = bfs_info,
"ffs" = ffs_info,
"tfs" = tfs_info
)
print(model_infos)
model_infos <- rbind(
"nul" = model_info(model_nul),
"vif" = model_info(model_vif),
"sig" = model_info(model_sig),
"bfs" = model_info(model_bfs),
"ffs" = model_info(model_ffs),
"tfs" = model_info(model_tfs)
)
print(model_infos)
model_infos <- rbind(
"nul" = model_info(model_nul),
"vif" = model_info(model_vif),
"sig" = model_info(model_sig),
"bfs" = model_info(model_bfs)#,
#  "ffs" = model_info(model_ffs),
#  "tfs" = model_info(model_tfs)
)
print(model_infos)
View(dataset)
View(dataset_vif)
rm(
base_var,
col_nums,
col_nums_sig,
corr_matrix,
corr_matrix_sub,
corr_matrix_sig,
dataset_sig,
#dataset_vif,
expl_vars,
expl_vars_sub,
expl_vars_sig,
f_old,
f_vif,
f_new,
model_nul,
model_old,
#model_vif,
path,
rel_var,
sel_var,
vif_func
)
print("Build library")
library(dplyr)    # data warangling
library(stats)    # glm
library(fmsb)     # variable inflation factor
library(VIF)      # vif for backwards feature selection
vif_func <- function(in_frame,thresh=10,trace=T,...){
require(fmsb)
if(class(in_frame) != 'data.frame') in_frame<-data.frame(in_frame)
#get initial vif value for all comparisons of variables
vif_init<-NULL
var_names <- names(in_frame)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_init<-rbind(vif_init, c(val, VIF(lm(form_in, data = in_frame, ...))))
}
vif_max<-max(as.numeric(vif_init[,2]), na.rm = TRUE)
if(vif_max < thresh){
if(trace==T){ #print output of each iteration
prmatrix(vif_init,collab=c('var','vif'),rowlab=rep('',nrow(vif_init)),quote=F)
cat('\n')
cat(paste('All variables have VIF < ', thresh,', max VIF ',round(vif_max,2), sep=''),'\n\n')
}
return(var_names)
}
else{
in_dat<-in_frame
#backwards selection of explanatory variables, stops when all VIF values are below 'thresh'
while(vif_max >= thresh){
vif_vals<-NULL
var_names <- names(in_dat)
for(val in var_names){
regressors <- var_names[-which(var_names == val)]
form <- paste(regressors, collapse = '+')
form_in <- formula(paste(val, '~', form))
vif_add<-VIF(lm(form_in, data = in_dat, ...))
vif_vals<-rbind(vif_vals,c(val,vif_add))
}
max_row<-which(vif_vals[,2] == max(as.numeric(vif_vals[,2]), na.rm = TRUE))[1]
vif_max<-as.numeric(vif_vals[max_row,2])
if(vif_max<thresh) break
if(trace==T){ #print output of each iteration
prmatrix(vif_vals,collab=c('var','vif'),rowlab=rep('',nrow(vif_vals)),quote=F)
cat('\n')
cat('removed: ',vif_vals[max_row,1],vif_max,'\n\n')
flush.console()
}
in_dat<-in_dat[,!names(in_dat) %in% vif_vals[max_row,1]]
}
return(names(in_dat))
}
model_info <- function(model){
list <- data.frame(
"Predictors" = length(coef(model)),
"Deviance" = model$deviance,
"AIC" = model$aic,
"McFadden" = 1 - (model$deviance / model$null.deviance),
"adj McFadden" = 1 - ((model$deviance+length(model$coefficients)) / model$null.deviance))
return(list)
}
print("Read input data")
dataset <- read.csv(
file = "~/Desktop/Masterarbeit_local/05_correlation/02_output/dataset_noncor.csv",
sep = ";"
)
print("Preprocessing dataset")
expl_vars <- dataset[, c(3:ncol(dataset))]
source('~/Desktop/Masterarbeit_local/06_multicollinearities/v68.R')
rm(
base_var,
col_nums,
dataset_vif,
expl_vars,
expl_vars_sub,
f_vif,
f_new,
model_info,
path,
rel_var,
sel_var,
vif_func
)
rm(
base_var,
col_nums,
dataset_vif,
expl_vars,
expl_vars_sub,
f_vif,
f_new,
model_info,
model_ffs,
model_tfs,
path,
rel_var,
sel_var,
vif_func
)
model_nul <- glm(success ~ 1,data = dataset, family = "binomial")
rm(
base_var,
col_nums,
dataset_vif,
expl_vars,
expl_vars_sub,
f_vif,
f_new,
model_info,
model_ffs,
model_tfs,
path,
rel_var,
sel_var,
vif_func
)
